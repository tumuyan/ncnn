name: buid ubuntu
on:
  repository_dispatch:
  workflow_dispatch:

env:
  DEVELOPER_DIR: /Applications/Xcode_14.0.1.app/Contents/Developer
  EMSCRIPTEN_VERSION: 2.0.8

permissions:
  contents: read

jobs:

  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  full-source:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-full-source
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: package
      run: |
        rm -rf .git
        rm -f /tmp/${{ env.PACKAGENAME }}.zip
        zip -9 -y -r /tmp/${{ env.PACKAGENAME }}.zip .
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: /tmp/${{ env.PACKAGENAME }}.zip

  ubuntu-1804:
    needs: [setup]
    runs-on: ubuntu-18.04
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-1804
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/install/* ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip

    - name: list files
      run: |
        ls build/install
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: build/install/*
        retention-days: 90
        

  ubuntu-1804-shared:
    needs: [setup]
    runs-on: ubuntu-18.04
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-1804-shared
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_SHARED_LIB=ON ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a -P build/install/* ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: build/install/*

  ubuntu-2004:
    needs: [setup]
    runs-on: ubuntu-20.04
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2004
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/install/* ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2004-shared:
    needs: [setup]
    runs-on: ubuntu-20.04
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2004-shared
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_SHARED_LIB=ON ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a -P build/install/* ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2204:
    needs: [setup]
    runs-on: ubuntu-22.04
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2204
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/install/* ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-2204-shared:
    needs: [setup]
    runs-on: ubuntu-22.04
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2204-shared
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: apt
      run: |
        sudo apt-get install -y libvulkan-dev libprotobuf-dev protobuf-compiler
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" \
            -DNCNN_VULKAN=ON -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=ON -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_SHARED_LIB=ON ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a -P build/install/* ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip


  release:
    permissions:
      contents: write  # for actions/create-release to create a release
    needs: [setup, full-source, ubuntu-1804, ubuntu-1804-shared, ubuntu-2004, ubuntu-2004-shared, ubuntu-2204, ubuntu-2204-shared]
    runs-on: ubuntu-latest
    steps:
    - name: upload-ncnn-ubuntu-1804
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-1804
      with:
        path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        name: ${{ env.PACKAGENAME }}.zip
        retention-days: 90

    - name: upload-ncnn-ubuntu-1804-shared
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-1804-shared
      with:
        path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        name: ${{ env.PACKAGENAME }}.zip
        retention-days: 90

    - name: upload-ncnn-ubuntu-2004
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2004
      with:
        path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        name: ${{ env.PACKAGENAME }}.zip
        retention-days: 90

    - name: upload-ncnn-ubuntu-2004-shared
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2004-shared
      with:
        path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        name: ${{ env.PACKAGENAME }}.zip
        retention-days: 90

    - name: upload-ncnn-ubuntu-2204
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2204
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        name: ${{ env.PACKAGENAME }}.zip


    - name: upload-ncnn-ubuntu-2204-shared
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-ubuntu-2204-shared
      with:
        url: ${{ steps.create_release.outputs.upload_url }}
        path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        name: ${{ env.PACKAGENAME }}.zip
        retention-days: 90
